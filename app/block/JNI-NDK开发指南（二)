通过第一篇文章，大家明白了调用native方法之前，首先要调用System.loadLibrary接口加载一个实现了native方法的动态库才能正常访问，否则就会抛出java.lang.UnsatisfiedLinkError异常，找不到XX方法的提示。现在我们想想，在Java中调用某个native方法时，JVM是通过什么方式，能正确的找到动态库中C/C++实现的那个native函数呢？

JVM查找native方法有两种方式：

1> 按照JNI规范的命名规则

2> 调用JNI提供的RegisterNatives函数，将本地函数注册到JVM中。（后面会详细介绍）

本文通过第一篇文章HelloWorld示例中的Java_com_study_jnilearn_HelloWorld_sayHello函数来详细介绍第一种方式：

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_study_jnilearn_HelloWorld */
 
#ifndef _Included_com_study_jnilearn_HelloWorld
#define _Included_com_study_jnilearn_HelloWorld
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_study_jnilearn_HelloWorld
 * Method:    sayHello
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello
  (JNIEnv *, jclass, jstring);
 
#ifdef __cplusplus
}
#endif
#endif
JNIEXPORT 和 JNICALL的作用：

在上篇文章中，我们在将HelloWorld.c编译成动态库的时候，用-I参数包含了JDK安装目录下的两个头文件目录：

gcc -dynamiclib -o /Users/yangxin/Library/Java/Extensions/libHelloWorld.jnilib jni/HelloWorld.c -framework JavaVM -I/$JAVA_HOME/include -I/$JAVA_HOME/include/darwin
其中第一个目录为jni.h头文件所在目录，第二个是跨平台头文件目录（mac os x系统下的目录名为darwin，在windows下目录名为win32，linux下目录名为linux），用于定义与平台相关的宏，其中用于标识函数用途的两个宏JNIEXPORT和 JNICALL，就定义在darwin目录下的jni_md.h头文件中。在Windows中编译dll动态库规定，如果动态库中的函数要被外部调用，需要在函数声明中添加__declspec(dllexport)标识，表示将该函数导出在外部可以调用。在Linux/Unix系统中，这两个宏可以省略不加。这两个平台的区别是由于各自的编译器所产生的可执行文件格式不一样。这里有篇文章详细介绍了两个平台编译的动态库区别：http://www.cnblogs.com/chio/archive/2008/11/13/1333119.html。JNICALL在windows中的值为__stdcall，用于约束函数入栈顺序和堆栈清理的规则。

Windows下jni_md.h头文件内容：

#ifndef _JAVASOFT_JNI_MD_H_
#define _JAVASOFT_JNI_MD_H_
 
#define JNIEXPORT __declspec(dllexport)
#define JNIIMPORT __declspec(dllimport)
#define JNICALL __stdcall
 
typedef long jint;
typedef __int64 jlong;
typedef signed char jbyte;
 
#endif 
Linux下jni_md.h头文件内容：

#ifndef _JAVASOFT_JNI_MD_H_
#define _JAVASOFT_JNI_MD_H_
 
#define JNIEXPORT
#define JNIIMPORT
#define JNICALL
 
typedef int jint;
#ifdef _LP64 /* 64-bit Solaris */
typedef long jlong;
#else
typedef long long jlong;
#endif
 
typedef signed char jbyte;
 
#endif
从Linux下的jni_md.h头文件可以看出来，JNIEXPORT 和 JNICALL是一个空定义，所以在Linux下JNI函数声明可以省略这两个宏。

函数的命名规则：

用javah工具生成函数原型的头文件，函数命名规则为：Java_类全路径方法名。如Java_com_study_jnilearn_HelloWorld_sayHello，其中Java是函数的前缀，com_study_jnilearn_HelloWorld是类名，sayHello是方法名，它们之间用 _(下划线) 连接。

函数参数：

JNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello(JNIEnv *, jclass, jstring);

第一个参数：JNIEnv* 是定义任意native函数的第一个参数（包括调用JNI的RegisterNatives函数注册的函数），指向JVM函数表的指针，函数表中的每一个入口指向一个JNI函数，每个函数用于访问JVM中特定的数据结构。

第二个参数：调用java中native方法的实例或Class对象，如果这个native方法是实例方法，则该参数是jobject，如果是静态方法，则是jclass

第三个参数：Java对应JNI中的数据类型，Java中String类型对应JNI的jstring类型。（后面会详细介绍JAVA与JNI数据类型的映射关系）

函数返回值类型：

夹在JNIEXPORT和JNICALL宏中间的jstring，表示函数的返回值类型，对应Java的String类型

总结：

当我们熟悉了JNI的native函数命名规则之后，就可以不用通过javah命令去生成相应java native方法的函数原型了，只需要按照函数命名规则编写相应的函数原型和实现即可。

比如com.study.jni.Utils类中还有一个计算加法的native实例方法add，有两个int参数和一个int返回值:public native int add(int num1, int num2)，对应JNI的函数原型就是：JNIEXPORT jint JNICALL Java_com_study_jni_Utils_add(JNIEnv *, jobject, jint,jint); 